

@model Algorithm

@{


    int size = Model.chessboard.size;
    if (Model.chessboard.size > 8)
        size = 8;
    double square = 25 * (10 - size) * 0.76;
    string squareSize = square + "px";
    double image = square - 15;
    string imageSize = image + "px";
    double padding = 11 - size;
    string paddingSize = padding + "px";
    double min_size = square * (Model.chessboard.size + 1);
    string min_sizeStr = min_size + "px";
    double font = 15 * (10 - size) * 0.8;
    string fontSize = font + "px";
    int minPossibleSizeOfBorad = 4;
    ViewData["Title"] = "Home Page";


    bool isQueenOnBox(int i, int j)
    {
        return Model.chessboard.IsQueenOnBox(i, j);
        //return true;
    }

    void displayChessboard()
    {
        for (int i = 0; i < @Model.chessboard.size + 1; i++)
        {
            if (i == 0)
            {
                <div class="square-number" style="color: white">0</div>
            }
            else
            {
                char sign = Convert.ToChar(i + 'A' - 1);
                <div class="square-number">

                    <div class="number">
                        @sign
                    </div>
                </div>
            }
        }
        <br />
        for (int i = 0; i < @Model.chessboard.size; i++)
        {
            <div class="square-number" style="vertical-align:top;">@(i+1)</div>
            for (int j = 0; j < @Model.chessboard.size; j++)
            {
                if ((i + j) % 2 == 1)

                {
                    if (isQueenOnBox(i, j))
                    {
                        <div class="square-0">

                            <a href="https://imgbb.com/"><img src="https://i.ibb.co/JxZBLTK/crown-1.png" alt="crown-1" border="0"></a>
                        </div>
                    }
                    else
                    {
                        <div class="square-0"></div>
                    }
                }
                else
                {
                    if (isQueenOnBox(i, j))
                    {
                        <div class="square-1">
                            <a href="https://imgbb.com/"><img src="https://i.ibb.co/JxZBLTK/crown-1.png" alt="crown-1" border="0"></a>
                        </div>
                    }
                    else
                    {
                        <div class="square-1"></div>
                    }
                }
            }
            <br />
        }
        <br />
    }
}



<div class="text-center">
    <h1 class="display-4">N Queens Problem</h1>
    @*<p>On the N-queens problem, implement the hill-climbing, simulated annealing, local beam search and genetic algorithms. Research the algorithms using the web. The application must have a graphical user interface and you must enable the user to change algorithm parameters. For simulated annealing, the user should be able to change the starting temperature and the cooling factor. For local beam search, the user should be able to change the number of states. For the genetic algorithm, the user should be able to change the size of a single generation, the percent of elitism, the crossover probability, the mutation probability and the number of generations.</p>*@
</div>

<div class="site-index">
    <div class="body-content">
        <div class="row">
            <div class="form-group col-md-3">
                <br />
                <br />
                <br />
                <div id="buttonsForChoosingAlgorithm" style="visibility:hidden ">
                    <label>Choose algorithm to perform: </label>
                    <button type="button" onclick="hillClimbingClicked()" id="btn-hill-climbing" class="btn btn-outline-primary btn-block">hill-climbing</button>
                    <button type="button" onclick="simulatedAnnealingClicked()" class="btn btn-outline-secondary btn-block">simulated annealing</button>
                    <button type="button" onclick="localBeamSearchClicked()" class="btn btn-outline-success btn-block">local beam search</button>
                    <button type="button" onclick="geneticAlgorithmsClicked()" class="btn btn-outline-danger btn-block">genetic algorithms</button>
                </div>
                <br />
                <br />

                @using (Html.BeginForm("randomChessboard", "NQueensProblem", FormMethod.Post))
                {
                    <label for="size">Change board size</label>
                    <select id="size" name="size" class="form-control">
                        <option>4</option>
                        <option>5</option>
                        <option>6</option>
                        <option>7</option>
                        <option>8</option>
                        <option>9</option>
                        <option>10</option>
                        <option>11</option>
                        <option>12</option>
                    </select>

                    <button type="submit" class="btn btn-outline-secondary" style="margin-top: 15px; margin-bottom: 15px">
                        Random hetmans
                    </button>
                }

            </div>




            <div class="col-lg-7" style="min-width: @min_sizeStr">
                <div class="chessboard">
                    @{
                        displayChessboard();
                    }
                </div>
            </div>

            <div class="col-lg-2" id="chooseBoradSize" style="display:none ">
                <br />
                <br />
                <br />
                @using (Html.BeginForm("DoAlgorithm", "NQueensProblem", FormMethod.Post))
                {
            <center>

                <br />
                <br />
                <input name="algorithm" class="form-control" id="algorithm" display="block">

                <h3><div id="labelInsertVariables" class="badge badge-secondary" style="display: none">Insert data:</div></h3>

                <div id="hillClimbingVar" style="display: none">
                    <div class="form-group">
                        <input name="maxNumberOfSteps" PreviewTextInput="NumberValidationTextBox" class="form-control" id="firVar" aria-describedby="emailHelp">
                        <small id="emailHelp" class="form-text text-muted">Cooling Factor</small>
                    </div>
                </div>

                <div id="simulatedAnnealingVar" style="display: none">
                    <div class="form-group">
                        <input name="coolingFactor" class="form-control" id="firVar" aria-describedby="emailHelp">
                        <small id="emailHelp" class="form-text text-muted">Cooling Factor</small>
                    </div>
                    <div class="form-group">
                        <input name="startingTemperature" class="form-control" id="secVar" aria-describedby="emailHelp">
                        <small id="emailHelp" class="form-text text-muted">Starting Temperature</small>
                    </div>
                </div>

                <div id="localBeamSearchVar" style="display: none">
                    <div class="form-group">
                        <input name="numberOfStates" class="form-control" id="firVar" aria-describedby="emailHelp">
                        <small id="emailHelp" class="form-text text-muted">Number of states</small>
                    </div>
                </div>

                <div id="geneticAlgorithmsVar" style="display: none">
                    <div class="form-group">
                        <input name="sizeOfASingleGeneration" id="sizeOfASingleGeneration" class="form-control" id="firVar" aria-describedby="emailHelp">
                        <small class="form-text text-muted">Size of a single generation</small>
                    </div>
                    <div class="form-group">
                        <input name="percentOfElitism" class="form-control" id="secVar" aria-describedby="emailHelp">
                        <small id="emailHelp" class="form-text text-muted">Percent of elitism</small>
                    </div>
                    <div class="form-group">
                        <input name="crossoverProbability" class="form-control" id="firVar" aria-describedby="emailHelp">
                        <small id="emailHelp" class="form-text text-muted">Crossover probability</small>
                    </div>
                    <div class="form-group">
                        <input name="mutationProbability" class="form-control" id="secVar" aria-describedby="emailHelp">
                        <small id="emailHelp" class="form-text text-muted">Mutation probability</small>
                    </div>
                    <div class="form-group">
                        <input name="numberOfGenerations" class="form-control" id="secVar" aria-describedby="emailHelp" placeholder="duapka">
                        <small id="emailHelp" class="form-text text-muted">Number of generations</small>
                    </div>
                </div>


                <button type="submit" class="btn btn-outline-secondary" style="margin-top: 15px; margin-bottom: 15px">
                    Solve problem
                </button>

            </center>
                }

            </div>

        </div>
    </div>

    <script>
        document.getElementById("size").options.selectedIndex = @Model.chessboard.size-@minPossibleSizeOfBorad;

        if (@Model.chessboard.QueensOnBoard == 1) {
            document.getElementById("buttonsForChoosingAlgorithm").style.visibility = "visible";
        }
    </script>

    <style>

    .chessboard div {
        display: inline-block;
        width: @squareSize;
        height:  @squareSize;
        border-radius: 10px;
        vertical-align:text-top;
        text-align:center;
        padding:@paddingSize;

    }
    .square-0 {
        background-color: gray;
        border: 2px solid #000000;
        text-align:right;
    }
    .square-1 {
        background-color: #282828;
        border: 2px solid #000000;
    }
        .square-number {
            background-color: white;
            font-size: @fontSize;
            padding: 0px;
        }
    .number {
        text-align:center;
       margin:auto;
    }
        img {
            width: @imageSize;
            height: @imageSize;
        }

    </style>

